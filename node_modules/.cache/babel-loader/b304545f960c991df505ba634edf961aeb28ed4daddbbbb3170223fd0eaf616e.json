{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport compatibilityData from '../data/compatibility-data.json';\n\n// Custom hook to fetch and process compatibility data\nexport const useCompatibilityChecker = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    try {\n      // In a real app, this would be a fetch call to an API\n      // For this demo, we're using the imported JSON directly\n      setData(compatibilityData);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to load compatibility data');\n      setLoading(false);\n    }\n  }, []);\n  const checkCompatibility = (drugs, diluent) => {\n    if (!data || !drugs || drugs.length === 0 || !diluent) {\n      return null;\n    }\n\n    // Sort drugs alphabetically to match the format in our dataset\n    const sortedDrugs = [...drugs].sort();\n\n    // First check for exact match in our dataset\n    const exactMatch = data.combinations.find(combo => {\n      if (combo.diluent !== diluent) return false;\n      if (combo.drugs.length !== sortedDrugs.length) return false;\n\n      // Check if all drugs match (they're already sorted)\n      return JSON.stringify(combo.drugs.sort()) === JSON.stringify(sortedDrugs);\n    });\n    if (exactMatch) {\n      return {\n        compatible: exactMatch.compatible,\n        message: exactMatch.compatible ? 'These drugs are compatible in the selected diluent.' : 'These drugs are NOT compatible in the selected diluent.',\n        notes: exactMatch.notes\n      };\n    }\n\n    // If no exact match for 2 or 3 drugs, check if any pair is incompatible\n    if (sortedDrugs.length > 1) {\n      for (let i = 0; i < sortedDrugs.length; i++) {\n        for (let j = i + 1; j < sortedDrugs.length; j++) {\n          const pairToCheck = [sortedDrugs[i], sortedDrugs[j]].sort();\n          const pairMatch = data.combinations.find(combo => {\n            if (combo.diluent !== diluent) return false;\n            if (combo.drugs.length !== 2) return false;\n            return JSON.stringify(combo.drugs.sort()) === JSON.stringify(pairToCheck);\n          });\n          if (pairMatch && !pairMatch.compatible) {\n            return {\n              compatible: false,\n              message: `${pairToCheck[0]} and ${pairToCheck[1]} are NOT compatible in the selected diluent.`,\n              notes: pairMatch.notes\n            };\n          }\n        }\n      }\n    }\n\n    // If we have no data on this combination\n    return {\n      compatible: null,\n      message: 'No compatibility data available for this combination.',\n      notes: 'Please consult a pharmacist or official drug references.'\n    };\n  };\n  return {\n    data,\n    loading,\n    error,\n    checkCompatibility\n  };\n};\n_s(useCompatibilityChecker, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useCompatibilityChecker;","map":{"version":3,"names":["React","useState","useEffect","compatibilityData","useCompatibilityChecker","_s","data","setData","loading","setLoading","error","setError","err","checkCompatibility","drugs","diluent","length","sortedDrugs","sort","exactMatch","combinations","find","combo","JSON","stringify","compatible","message","notes","i","j","pairToCheck","pairMatch"],"sources":["/home/ubuntu/drug-compatibility-checker/src/data/useCompatibilityChecker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport compatibilityData from '../data/compatibility-data.json';\n\n// Custom hook to fetch and process compatibility data\nexport const useCompatibilityChecker = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    try {\n      // In a real app, this would be a fetch call to an API\n      // For this demo, we're using the imported JSON directly\n      setData(compatibilityData);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to load compatibility data');\n      setLoading(false);\n    }\n  }, []);\n\n  const checkCompatibility = (drugs, diluent) => {\n    if (!data || !drugs || drugs.length === 0 || !diluent) {\n      return null;\n    }\n\n    // Sort drugs alphabetically to match the format in our dataset\n    const sortedDrugs = [...drugs].sort();\n    \n    // First check for exact match in our dataset\n    const exactMatch = data.combinations.find(combo => {\n      if (combo.diluent !== diluent) return false;\n      if (combo.drugs.length !== sortedDrugs.length) return false;\n      \n      // Check if all drugs match (they're already sorted)\n      return JSON.stringify(combo.drugs.sort()) === JSON.stringify(sortedDrugs);\n    });\n\n    if (exactMatch) {\n      return {\n        compatible: exactMatch.compatible,\n        message: exactMatch.compatible \n          ? 'These drugs are compatible in the selected diluent.' \n          : 'These drugs are NOT compatible in the selected diluent.',\n        notes: exactMatch.notes\n      };\n    }\n\n    // If no exact match for 2 or 3 drugs, check if any pair is incompatible\n    if (sortedDrugs.length > 1) {\n      for (let i = 0; i < sortedDrugs.length; i++) {\n        for (let j = i + 1; j < sortedDrugs.length; j++) {\n          const pairToCheck = [sortedDrugs[i], sortedDrugs[j]].sort();\n          \n          const pairMatch = data.combinations.find(combo => {\n            if (combo.diluent !== diluent) return false;\n            if (combo.drugs.length !== 2) return false;\n            return JSON.stringify(combo.drugs.sort()) === JSON.stringify(pairToCheck);\n          });\n\n          if (pairMatch && !pairMatch.compatible) {\n            return {\n              compatible: false,\n              message: `${pairToCheck[0]} and ${pairToCheck[1]} are NOT compatible in the selected diluent.`,\n              notes: pairMatch.notes\n            };\n          }\n        }\n      }\n    }\n\n    // If we have no data on this combination\n    return {\n      compatible: null,\n      message: 'No compatibility data available for this combination.',\n      notes: 'Please consult a pharmacist or official drug references.'\n    };\n  };\n\n  return { data, loading, error, checkCompatibility };\n};\n\nexport default useCompatibilityChecker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}